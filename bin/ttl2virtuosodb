#!/bin/sh
#
# ttl2virtuosodb - load ttl data to virtuoso and create virtuoso.db
#
# Authors: Yoko Okabeppu (https://github.com/okbp) for docker-compose yaml template and ttl loading script
#          Tazro Inutano Ohta (https://github.com/inutano) for the rest
#
#set -eEux # For debugging
VERSION="0.2.3"

#
# DEFAULT SETTINGS: CHANGE IF NEEDED
#
VIRTUOSO_CONTAINER_IMAGE="openlink/virtuoso-opensource-7:7.2.6-r1-g0a3336c"
TTL_VALIDATOR_CONTAINER_IMAGE="quay.io/inutano/turtle-validator:v1.0"
DEFAULT_VIRTUOSO_PORT="8890"
DEFAULT_NUMBER_OF_THREADS=4
DEFAULT_RDF_GRAPH_NAME="http://bio.cow/graph"

#
# Setup functions
#
setup_t2v() {
  set_directories
  set_port_number
  set_number_of_threads
  set_graph_name
  set_max_memory
}

set_directories() {
  # Directories
  BASE_DIR="$(cd "$(dirname ${0})/.." && pwd -P)"

  DATA_DIR="${BASE_DIR}/data"
  mkdir -p "${DATA_DIR}"

  DB_DIR="${BASE_DIR}/db"
  mkdir -p "${DB_DIR}"

  SPARQL_DIR="${BASE_DIR}/sparql"
  mkdir -p "${SPARQL_DIR}"

  # Files
  docker_compose_yml="${BASE_DIR}/docker-compose.yml"
  virtuoso_db_file="${DB_DIR}/virtuoso.db"

  cd ${BASE_DIR}
}

set_port_number() {
  if [[ -z "${T2V_VIRTUOSO_PORT}" ]]; then
    VIRTUOSO_PORT=${DEFAULT_VIRTUOSO_PORT}
  else
    VIRTUOSO_PORT="${T2V_VIRTUOSO_PORT}"
  fi
}

set_number_of_threads() {
  if [[ -z "${T2V_NUMBER_OF_THREADS}" ]]; then
    NUMBER_OF_THREADS="${DEFAULT_NUMBER_OF_THREADS}"
  else
    NUMBER_OF_THREADS="${T2V_NUMBER_OF_THREADS}"
  fi
}

set_graph_name() {
  if [[ -z "${T2V_RDF_GRAPH_NAME}" ]]; then
    RDF_GRAPH_NAME="${DEFAULT_RDF_GRAPH_NAME}"
  else
    RDF_GRAPH_NAME="${T2V_RDF_GRAPH_NAME}"
  fi
}

# Define memory amount to use for loading
# Use "VIRTUOSO_MAX_MEMORY", or max memory amount of the system
set_max_memory() {
  if [[ ! -z "${T2V_VIRTUOSO_MAX_MEMORY}" ]]; then
    # Use environment variable if it's set
    MEM=${T2V_VIRTUOSO_MAX_MEMORY}
  else
    # Use system's max memory for default
    case "$(uname -s)" in
      Linux*)
        MEM=$(vmstat -s | grep "total memory" | awk '$0=$1')
        ;;
      Darwin)
        MEM=$(sysctl -n hw.ncpu)
        ;;
    esac
  fi
  set_buffers
}

set_buffers() {
  # Set paramerters based on the total amount of memory
  if [[ ${MEM} -ge 64000000 ]]; then
    NumOfBuffers=5450000
    MaxDirtyBuffers=4000000
  elif [[ ${MEM} -ge 48000000 ]]; then
    NumOfBuffers=4000000
    MaxDirtyBuffers=3000000
  elif [[ ${MEM} -ge 32000000 ]]; then
    NumOfBuffers=2720000
    MaxDirtyBuffers=2000000
  elif [[ ${MEM} -ge 16000000 ]]; then
    NumOfBuffers=1360000
    MaxDirtyBuffers=1000000
  elif [[ ${MEM} -ge 8000000 ]]; then
    NumOfBuffers=680000
    MaxDirtyBuffers=500000
  elif [[ ${MEM} -ge 4000000 ]]; then
    NumOfBuffers=340000
    MaxDirtyBuffers=250000
  else
    NumOfBuffers=170000
    MaxDirtyBuffers=130000
  fi
}

#
# Function to load data to virtuoso
#
generate_docker_compose_yml() {
  if [[ ! -e "${docker_compose_yml}" ]]; then
    cat <<EOS > "${docker_compose_yml}"
version: '3'
services:
  virtuoso:
    image: ${VIRTUOSO_CONTAINER_IMAGE}
    container_name: ttl2virtuosodb
    environment:
      DBA_PASSWORD: "dba"
      VIRT_Parameters_DirsAllowed: "., ../vad, /usr/share/proj, /database, /data"
      VIRT_Parameters_NumberOfBuffers: ${NumOfBuffers}
      VIRT_Parameters_MaxDirtyBuffers: ${MaxDirtyBuffers}
      VIRT_Client_SQL_PREFETCH_ROWS: "10000"
      VIRT_Client_SQL_PREFETCH_BYTES: "160000"
      VIRT_SPARQL_ResultSetMaxRows: "1000000"
      VIRT_SPARQL_MaxSortedTopRows: "100000"
      VIRT_SPARQL_MaxQueryExecutionTime: "300"
      VIRT_SPARQL_MaxQueryCostEstimationTime: "-1"
    ports:
      - "${VIRTUOSO_PORT}:8890"
    user: "${UID:-0}:${GID:-0}"
    volumes:
      - ${BASE_DIR}/db:/database
      - ${BASE_DIR}/data:/data
EOS
  fi
}

load_parallel() {
  wait_virtuoso
  exec_isql "DB.DBA.RDF_OBJ_FT_RULE_ADD (null, null, 'All');"
  exec_isql "DB.DBA.RDF_OBJ_FT_RULE_DEL (null, null, 'All');"

  exec_isql "ld_dir_all('/data', '*.ttl', '${RDF_GRAPH_NAME}');" # Load directory of turtle files

  for i in $(seq ${NUMBER_OF_THREADS}); do
    exec_isql "rdf_loader_run();" &                              # Run loader in parallel and sent background
  done
  wait

  exec_isql "checkpoint;"                                        # Checkpoint after loading
}

create_text_index() {
  wait_virtuoso
  exec_isql "DB.DBA.VT_INC_INDEX_DB_DBA_RDF_OBJ ();"            # Create text index synchronously
}

disable_checkpoint() {
  wait_virtuoso
  exec_isql "checkpoint_interval (0);"                           # Disable automatic checkpoint
}

wait_virtuoso() {
  while [[ -z $(curl -s "localhost:${VIRTUOSO_PORT}/sparql" 2>/dev/null | head -c 5) ]] ; do
    sleep 5
  done
}

exec_isql() {
  docker exec "ttl2virtuosodb" /opt/virtuoso-opensource/bin/isql 1111 dba dba exec="${@}"
}

#
# Control functions
#
virtuoso_up() {
  generate_docker_compose_yml
  docker-compose up -d
}

virtuoso_down() {
  docker-compose down
  docker-compose rm
}

validate_ttl() {
  find "${DATA_DIR}" -name "*ttl" -type f | while read ttl_path; do
    printf "Validating $(basename ${ttl_path})... \t"
    docker run --rm -v ${ttl_path}:/data.ttl "${TTL_VALIDATOR_CONTAINER_IMAGE}" ttl /data.ttl
  done
}

load_ttl() {
  load_parallel
}

query_sparql() {
  local query=${1}
  local endpoint_url="http://localhost:${VIRTUOSO_PORT}/sparql"

  if [[ ! -z $(which jq) ]]; then
    query_header="application/json"
    curl -s --header "Accept: ${query_header}" --data-urlencode "query=$(cat ${query})" ${endpoint_url} | jq .
  else
    query_header="text/tab-separated-values"
    curl -s --header "Accept: ${query_header}" --data-urlencode "query=$(cat ${query})" ${endpoint_url}
  fi
}

test_sparql() {
  find  "${SPARQL_DIR}" -name '*.rq' -type f | while read query; do
    echo "Query: $(basename ${query})"
    query_sparql ${query}
  done
}

show_status() {
  docker ps
  docker-compose ps
}

#
# Subcommands
#
up() {
  virtuoso_up
  show_status
}

down() {
  virtuoso_down
  show_status
}

validate() {
  validate_ttl
}

load() {
  virtuoso_up
  load_ttl
  test_sparql
  show_status
}

index() {
  virtuoso_up
  create_text_index
  test_sparql
  show_status
}

test() {
  virtuoso_up
  test_sparql
  show_status
}

status() {
  show_status
}

clean() {
  rm -f "${docker_compose_yml}"
  rm -fr "${DB_DIR}"/virtuoso*
}

print_version() {
  echo "ttl2virtuosodb: ${VERSION}"
}

print_help() {
  cat <<EOS
ttl2virtuosodb version: ${VERSION}
Usage:
  ttl2virtuosodb [up|down|add|clean|test|status|help|version]

Subcommand:
  up                      Start Viruoso using docker-compose with db/viruoso.db
  down                    Stop Virtuoso, DB files remain in the db diretory
  validate                Validate ttl files in data directory
  load                    Start Virtuoso and load data; add data to the existing
                          graph if virtuoso.db already exists
  index                   Create text index of loaded RDF data
  clean                   Remove files in db directory and docker-compose.yml
  test                    Run SPARQL queries (*.rq) in the sparql directory
  status                  Show status of docker-compose and docker containers
  help (-h|--help)        Show this help message
  version (-v|--version)  Show version information

Envrionment variable:
  T2V_VIRTUOSO_PORT           Set Virtuoso port number (default: 8890)
  T2V_VIRTUOSO_MAX_MEMORY     Set maximum memory usage (in KB, default: system max memory)
  T2V_NUMBER_OF_THREADS       Set number of threads for loading (default: 4)
  T2V_RDF_GRAPH_NAME          Set RDF graph name (default: http://bio.cow/graph)

EOS
}

#
# Main function
#
main() {
  # Setup directories, graph name, memory usage
  setup_t2v

  # argparse and run
  case "${1}" in
    "up")
      up
      ;;
    "down")
      down
      ;;
    "validate")
      validate
      ;;
    "load")
      load
      ;;
    "index")
      index
      ;;
    "clean")
      clean
      ;;
    "test")
      test
      ;;
    "status")
      status
      ;;
    -v|--version)
      print_version
      exit 0
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    *)
      print_help
      exit 0
      ;;
  esac
}

#
# Run
#
main ${1}
