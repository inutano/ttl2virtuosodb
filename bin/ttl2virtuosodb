#!/bin/sh
#
# ttl2virtuosodb
#
# Author: Yoko Okabeppu (https://github.com/okbp) for docker-compose yaml template and ttl loading script
#         Tazro Inutano Ohta (https://github.com/inutano) for the rest of the project
#
#
# Usage:
#   Load ttl files in the data directory and generate virtuoso.db file
#   $ ttl2virtuosodb up
#
#   Shut down the virtuoso server and remove container
#   $ ttl2virtuosodb down
#
set -eux

# ttl2virtuosodb version
VERSION="0.1.0"
VIRTUOSO_PORT="8890"
VIRTUOSO_CONTAINER_IMAGE="openlink/virtuoso-opensource-7:7.2.6-r1-g0a3336c"
RDF_GRAPH_NAME="https://bio.cow/graph"

# check the total amount of memory
case "$(uname -s)" in
  Linux*)
    mem=$(vmstat -s | grep "total memory" | awk '$0=$1')
    ;;
  Darwin)
    mem=$(sysctl -n hw.ncpu)
    ;;
esac

# Set paramerters based on the total amount of memory
if [[ ${mem} -ge 64000000 ]]; then
  NumOfBuffers=5450000
  MaxDirtyBuffers=4000000
elif [[ ${mem} -ge 48000000 ]]; then
  NumOfBuffers=4000000
  MaxDirtyBuffers=3000000
elif [[ ${mem} -ge 32000000 ]]; then
  NumOfBuffers=2720000
  MaxDirtyBuffers=2000000
elif [[ ${mem} -ge 16000000 ]]; then
  NumOfBuffers=1360000
  MaxDirtyBuffers=1000000
elif [[ ${mem} -ge 8000000 ]]; then
  NumOfBuffers=680000
  MaxDirtyBuffers=500000
elif [[ ${mem} -ge 4000000 ]]; then
  NumOfBuffers=340000
  MaxDirtyBuffers=250000
else
  NumOfBuffers=170000
  MaxDirtyBuffers=130000
fi

# Directories
BASE_DIR="$(cd $( dirname ${0}) && pwd -P)/.."
DATA_DIR="${BASE_DIR}/data"
DB_DIR="${BASE_DIR}/db"
mkdir -p "${DB_DIR}"

# Files
docker_compose_yml="${BASE_DIR}/docker-compose.yml"
virtuoso_db_file="${DB_DIR}/virtuoso.db"

# functions
print_version() {
  echo "ttl2virtuosodb: ${VERSION}"
}

print_help() {
  cat <<EOS
ttl2virtuosodb version: ${VERSION}
Usage:
  ttl2virtuosodb [up|down]
EOS
}

generate_docker_compose_yml() {
  if [[ ! -e "${docker_compose_yml}" ]]; then
    cat <<EOS > "${docker_compose_yml}"
version: '3'
services:
  virtuoso:
    image: ${VIRTUOSO_CONTAINER_IMAGE}
    container_name: ttl2virtuosodb
    environment:
      DBA_PASSWORD: "dba"
      VIRT_Parameters_DirsAllowed: "., ../vad, /usr/share/proj, /database, /data"
      VIRT_Parameters_NumberOfBuffers: ${NumOfBuffers}
      VIRT_Parameters_MaxDirtyBuffers: ${MaxDirtyBuffers}
      VIRT_Client_SQL_PREFETCH_ROWS: "10000"
      VIRT_Client_SQL_PREFETCH_BYTES: "160000"
      VIRT_SPARQL_ResultSetMaxRows: "1000000"
      VIRT_SPARQL_MaxSortedTopRows: "100000"
      VIRT_SPARQL_MaxQueryExecutionTime: "300"
      VIRT_SPARQL_MaxQueryCostEstimationTime: "-1"
    ports:
      - "${VIRTUOSO_PORT}:8890"
    user: "${UID:-0}:${GID:-0}"
    volumes:
      - ${BASE_DIR}/db:/database
      - ${BASE_DIR}/data:/data
EOS
  fi
}

wait_virtuoso() {
  while [[ -z $(curl "localhost:${VIRTUOSO_PORT}/sparql" 2>/dev/null) ]] ; do
    sleep 1
  done
}

exec_isql() {
  docker exec "ttl2virtuosodb" /opt/virtuoso-opensource/bin/isql "${@}"
}

load_parallel() {
  exec_isql 1111 dba dba exec="ld_dir_all('/data', '*.ttl', '${RDF_GRAPH_NAME}');"
  for i in $(jot 4); do
    exec_isql 1111 dba dba exec="rdf_loader_run();" &
  done
  wait
  exec_isql 1111 dba dba exec="checkpoint;"
}

load_ttl() {
  wait_virtuoso
  if [[ ! -e "${virtuoso_db_file}" ]]; then
    load_parallel
  fi
}

test_sparql() {
  query=$(cat "${BASE_DIR}/sparql/test.rq")
  curl --data-urlencode "query=${query}" http://localhost:${VIRTUOSO_PORT}/sparql
}

up() {
  cd ${BASE_DIR}
  generate_docker_compose_yml
  docker-compose up -d
  load_ttl
  test_sparql
}

down() {
  cd ${BASE_DIR}
  docker-compose down
  docker-compose rm
}

clean() {
  cd ${BASE_DIR}
  rm "${docker_compose_yml}"
  rm -fr "${DB_DIR}"/virtuoso*
}

# argparse and run
case "${1}" in
  -v|--version)
    print_version
    exit 0
    ;;
  -h|--help)
    print_help
    exit 0
    ;;
  "up")
    up
    ;;
  "down")
    down
    ;;
  "clean")
    clean
    ;;
  *)
    print_help
    exit 0
    ;;
esac
