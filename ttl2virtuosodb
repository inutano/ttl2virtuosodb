#!/bin/sh
#
# ttl2virtuosodb - load ttl data to virtuoso and create virtuoso.db
#
# Authors: Yoko Okabeppu (https://github.com/okbp) for docker-compose yaml template and ttl loading script
#          Tazro Inutano Ohta (https://github.com/inutano) for the rest
#
#set -eEux # For debugging
VERSION="0.4.2"

#
# DEFAULT SETTINGS: CHANGE IF NEEDED
#
VIRTUOSO_CONTAINER_IMAGE="openlink/virtuoso-opensource-7:7.2.6-r1-g0a3336c"
TTL_VALIDATOR_CONTAINER_IMAGE="quay.io/inutano/turtle-validator:v1.0"
SPARQL_PROXY_IMAGE="dbcls/sparql-proxy:snapshot-a8c881c"
GRASP_IMAGE="inutano/grasp:snapshot-8f6bb0f"

DEFAULT_VIRTUOSO_PORT="8890"
DEFAULT_NUMBER_OF_THREADS=4
DEFAULT_RDF_GRAPH_NAME="http://bio.cow/graph"

#
# Printt function
#
message() {
  case $2 in
    green|success)
      COLOR="92m";
      ;;
    yellow|warning)
      COLOR="93m";
      ;;
    red|danger)
      COLOR="91m";
      ;;
    blue|info)
      COLOR="96m";
      ;;
    *)
      COLOR="0m"
      ;;
  esac
  STARTCOLOR="\e[$COLOR";
  ENDCOLOR="\e[0m";
  printf "$STARTCOLOR%b$ENDCOLOR" "$1";
}

#
# Setup functions
#
setup_t2v() {
  setup_virtuoso
  setup_dirs
}

setup_virtuoso() {
  message "T2V: Configure Virtuoso..\n" "info"
  set_port_number
  set_number_of_threads
  set_graph_name
  set_max_memory
}

setup_dirs() {
  message "T2V: Configure directories..\n" "info"
  BASE_DIR="$(pwd -P)"
  set_data_dir
  set_db_dir
  set_sparql_dir
  set_grasp_resource_dir
  set_compose_path
}

set_data_dir() {
  if [[ -z ${DATA_DIR} ]]; then
    DATA_DIR="${BASE_DIR}/data"
    mkdir -p "${DATA_DIR}"
  else
    DATA_DIR=$(cd ${DATA_DIR} && pwd -P)
  fi
  message "T2V:   DATA DIR: ${DATA_DIR}\n" "info"
}

set_db_dir() {
  if [[ -z ${DB_DIR} ]]; then
    DB_DIR="${BASE_DIR}/db"
    mkdir -p "${DB_DIR}"
  else
    DB_DIR=$(cd ${DB_DIR} && pwd -P)
  fi
  message "T2V:   DB DIR: ${DB_DIR}\n" "info"
}

set_sparql_dir() {
  if [[ -z ${SPARQL_DIR} ]]; then
    SPARQL_DIR="${BASE_DIR}/sparql"
    mkdir -p "${SPARQL_DIR}"
  else
    SPARQL_DIR=$(cd ${SPARQL_DIR} && pwd -P)
  fi
  message "T2V:   SPARQL DIR: ${SPARQL_DIR}\n" "info"
}

set_grasp_resource_dir() {
  if [[ -z ${GRASP_RESOURCE_DIR} ]]; then
    GRASP_RESOURCE_DIR="${BASE_DIR}/grasp"
    mkdir -p "${GRASP_RESOURCE_DIR}"
  else
    GRASP_RESOURCE_DIR=$(cd ${GRASP_RESOURCE_DIR} && pwd -P)
  fi
  message "T2V:   Grasp resource DIR: ${GRASP_RESOURCE_DIR}\n" "info"
}

set_compose_path() {
  if [[ -z ${DOCKER_COMPOSE_YML_DIR} ]]; then
    DOCKER_COMPOSE_YML_DIR="${BASE_DIR}"
  fi
  DOCKER_COMPOSE_YML_PATH="${DOCKER_COMPOSE_YML_DIR}/ttl2virtuosodb-compose.yml"
  message "T2V:   COMPOSE YAML: ${DOCKER_COMPOSE_YML_PATH}\n" "info"
}

set_port_number() {
  if [[ -z "${VIRTUOSO_PORT}" ]]; then
    VIRTUOSO_PORT=${DEFAULT_VIRTUOSO_PORT}
  fi
  message "T2V:   Virtuoso port: ${VIRTUOSO_PORT}\n" "info"
}

set_number_of_threads() {
  if [[ -z "${NUMBER_OF_THREADS}" ]]; then
    NUMBER_OF_THREADS="${DEFAULT_NUMBER_OF_THREADS}"
  fi
  message "T2V:   Number of threads: ${NUMBER_OF_THREADS}\n" "info"
}

set_graph_name() {
  if [[ -z "${RDF_GRAPH_NAME}" ]]; then
    RDF_GRAPH_NAME="${DEFAULT_RDF_GRAPH_NAME}"
  fi
  message "T2V:   RDF Graph name: ${RDF_GRAPH_NAME}\n" "info"
}

# Define memory amount to use for loading
set_max_memory() {
  if [[ -z "${VIRTUOSO_MAX_MEMORY}" ]]; then
    # Use system's max memory for default
    case "$(uname -s)" in
      Linux*)
        VIRTUOSO_MAX_MEMORY=$(vmstat -s | grep "total memory" | awk '$0=$1')
        ;;
      Darwin)
        VIRTUOSO_MAX_MEMORY=$(sysctl -n hw.ncpu)
        ;;
    esac
  fi
  set_buffers
  message "T2V:   Virtuoso max memory: ${VIRTUOSO_MAX_MEMORY}\n" "info"
}

set_buffers() {
  # Set paramerters based on the total amount of VIRTUOSO_MAX_MEMORY
  if [[ ${VIRTUOSO_MAX_MEMORY} -ge 64000000 ]]; then
    NumOfBuffers=5450000
    MaxDirtyBuffers=4000000
  elif [[ ${VIRTUOSO_MAX_MEMORY} -ge 48000000 ]]; then
    NumOfBuffers=4000000
    MaxDirtyBuffers=3000000
  elif [[ ${VIRTUOSO_MAX_MEMORY} -ge 32000000 ]]; then
    NumOfBuffers=2720000
    MaxDirtyBuffers=2000000
  elif [[ ${VIRTUOSO_MAX_MEMORY} -ge 16000000 ]]; then
    NumOfBuffers=1360000
    MaxDirtyBuffers=1000000
  elif [[ ${VIRTUOSO_MAX_MEMORY} -ge 8000000 ]]; then
    NumOfBuffers=680000
    MaxDirtyBuffers=500000
  elif [[ ${VIRTUOSO_MAX_MEMORY} -ge 4000000 ]]; then
    NumOfBuffers=340000
    MaxDirtyBuffers=250000
  else
    NumOfBuffers=170000
    MaxDirtyBuffers=130000
  fi
}

#
# Function to load data to virtuoso
#
generate_docker_compose_yml() {
  if [[ ! -e "${DOCKER_COMPOSE_YML_PATH}" ]]; then
    cat <<EOS > "${DOCKER_COMPOSE_YML_PATH}"
version: '3'
services:
  virtuoso:
    image: ${VIRTUOSO_CONTAINER_IMAGE}
    container_name: ttl2virtuosodb
    environment:
      DBA_PASSWORD: "dba"
      VIRT_Parameters_DirsAllowed: "., ../vad, /usr/share/proj, /database, /data"
      VIRT_Parameters_NumberOfBuffers: ${NumOfBuffers}
      VIRT_Parameters_MaxDirtyBuffers: ${MaxDirtyBuffers}
      VIRT_Client_SQL_PREFETCH_ROWS: "10000"
      VIRT_Client_SQL_PREFETCH_BYTES: "160000"
      VIRT_SPARQL_ResultSetMaxRows: "1000000"
      VIRT_SPARQL_MaxSortedTopRows: "100000"
      VIRT_SPARQL_MaxQueryExecutionTime: "300"
      VIRT_SPARQL_MaxQueryCostEstimationTime: "-1"
    ports:
      - "${VIRTUOSO_PORT}:8890"
    user: "${UID:-0}:${GID:-0}"
    volumes:
      - ${DB_DIR}:/database
      - ${DATA_DIR}:/data
  sparql-proxy:
    image: ${SPARQL_PROXY_IMAGE}
    container_name: sparql-proxy
    environment:
      PORT: 3000
      SPARQL_BACKEND: http://virtuoso:${VIRTUOSO_PORT}/sparql
      ADMIN_USER: admin
      ADMIN_PASSWORD: password
    ports:
      - "3000:3000"
    user: "${UID:-0}:${GID:-0}"
  grasp:
    image: ${GRASP_IMAGE}
    container_name: grasp
    environment:
      RESOURCES_DIR: /resources
    volumes:
      - ${GRASP_RESOURCE_DIR}:/resources
    ports:
      - "4000:4000"
    user: "${UID:-0}:${GID:-0}"
EOS
  fi
}

load_parallel() {
  message "T2V: Start loading ttl files..\n" "info"

  exec_isql "DB.DBA.VT_BATCH_UPDATE ('DB.DBA.RDF_OBJ', 'ON', null);" # Disable text index, make it fully manual

  exec_isql "ld_dir_all('/data', '*.ttl', '${RDF_GRAPH_NAME}');" # Load directory of turtle files

  for i in $(seq ${NUMBER_OF_THREADS}); do
    exec_isql "rdf_loader_run();" &                              # Run loader in parallel and sent background
  done
  wait

  exec_isql "checkpoint;"                                        # Checkpoint after loading
  message "T2V: Done.\n" "info"
}

create_text_index() {
  exec_isql "DB.DBA.VT_INC_INDEX_DB_DBA_RDF_OBJ ();"            # Create text index synchronously
}

disable_checkpoint() {
  exec_isql "checkpoint_interval (0);"                           # Disable automatic checkpoint
}

wait_virtuoso() {
  message "T2V: Waiting for Virtuoso...\n" "info"
  while [[ -z $(curl -s "localhost:${VIRTUOSO_PORT}/sparql" 2>/dev/null | head -c 5) ]] ; do
    sleep 5
  done
  message "T2V: Virtuoso is raedy to accept query.\n" "info"
}

exec_isql() {
  docker exec "ttl2virtuosodb" /opt/virtuoso-opensource/bin/isql 1111 dba dba exec="${@}"
}

#
# Control functions
#
virtuoso_up() {
  generate_docker_compose_yml
  docker-compose --file ${DOCKER_COMPOSE_YML_PATH} up -d
  wait_virtuoso
}

virtuoso_down() {
  docker-compose --file ${DOCKER_COMPOSE_YML_PATH} down
  docker-compose --file ${DOCKER_COMPOSE_YML_PATH} rm
}

validate_ttl() {
  message "T2V: Start turtle validation..\n" "info"
  find "${DATA_DIR}" -name "*ttl" -type f | while read ttl_path; do
    printf "Validating $(basename ${ttl_path})... \t"
    docker run --rm -v ${ttl_path}:/data.ttl "${TTL_VALIDATOR_CONTAINER_IMAGE}" ttl /data.ttl
  done
  message "T2V: Done.\n" "info"
}

load_ttl() {
  load_parallel
}

query_sparql() {
  local query=${1}
  local endpoint_url="http://localhost:${VIRTUOSO_PORT}/sparql"

  if [[ ! -z $(which jq 2>/dev/null) ]]; then
    query_header="application/json"
    curl -s --header "Accept: ${query_header}" --data-urlencode "query=$(cat ${query})" ${endpoint_url} | jq .
  else
    query_header="text/tab-separated-values"
    curl -s --header "Accept: ${query_header}" --data-urlencode "query=$(cat ${query})" ${endpoint_url}
  fi
}

test_sparql() {
  message "T2V: Start testing..\n" "info"
  find  "${SPARQL_DIR}/" -name '*.rq' -type f | while read query; do
    printf "Query: $(basename ${query})\n"
    query_sparql ${query}
    printf "\n\n"
  done
  message "T2V: Done.\n" "info"
}

show_status() {
  printf "Running Docker containers:\n"
  docker ps
  printf "\n"
  printf "Docker-compose status:\n"
  docker-compose --file ${DOCKER_COMPOSE_YML_PATH} ps
}

#
# Subcommands
#
up() {
  setup_t2v
  virtuoso_up
  show_status
  message "T2V: Virtuoso server is ready at locahost:${VIRTUOSO_PORT}\n" "info"
}

down() {
  setup_t2v
  virtuoso_down
  show_status
  message "T2V: Virtuoso server is down.\n" "info"
}

validate() {
  setup_t2v
  validate_ttl
}

load() {
  setup_t2v
  virtuoso_up
  load_ttl
  test_sparql
  show_status
}

index() {
  setup_t2v
  virtuoso_up
  create_text_index
  test_sparql
  show_status
}

test() {
  setup_t2v
  virtuoso_up
  test_sparql
  show_status
}

status() {
  setup_dirs
  show_status
}

clean() {
  message "T2V: Cleaning..\n" "info"
  setup_dirs
  rm -f "${DOCKER_COMPOSE_YML_PATH}"
  rm -fr "${DB_DIR}"/virtuoso*
  message "T2V: Done.\n" "info"
}

print_version() {
  printf "ttl2virtuosodb: ${VERSION}\n"
}

print_help() {
  cat <<EOS
ttl2virtuosodb version: ${VERSION}
Usage:
  ttl2virtuosodb [-d|-db|-rq|-p|-t|-g|-m] [up|down|add|clean|test|status|help|version]

Subcommand:
  up                      Start Viruoso using docker-compose with db/viruoso.db
  down                    Stop Virtuoso, DB files remain in the db directory
  validate                Validate ttl files in data directory
  load                    Start Virtuoso and load data; add data to the existing
                          graph if virtuoso.db already exists
  index                   Create text index of loaded RDF data
  clean                   Remove files in db directory and docker-compose.yml
  test                    Run SPARQL queries (*.rq) in the sparql directory
  status                  Show status of docker-compose and docker containers
  help (-h|--help)        Show this help message
  version (-v|--version)  Show version information

Options:
  -d <dir>,    --data-dir <dir>      Path to turtle file directory (default: ./data)
  -db <dir>,   --database-dir <dir>  Path to virtuoso database directory (default: ./db)
  -rq <dir>,   --sparql-dir <dir>    Path to test SPARQL query directory (default: ./sparql)
  --grasp-dir <dir>                      Path to grasp resource directory (default: ./grasp)
  --compose <dir>                    Path to directory where ttl2virtuosodb-compose.yml
                                     will be saved (default: .)
  -p <int>,    --port <int>          Set Virtuoso port number (default: 8890)
  -t <int>,    --threads <int>       Set number of threads for loading (default: 4)
  -g <string>, --graph <string>      Set RDF graph name (default: http://bio.cow/graph)
  -m <int>,    --max-memory <int>    Set maximum memory usage (in KB, default: system max memory)

EOS
}

#
# Main function
#
main() {
  # argparse and run
  if [[ $# -eq 0 ]]; then
    print_help
    exit 0
  fi
  while [[ $# -gt 0 ]]; do
    key=${1}
    case ${key} in
      -v|--version)
        print_version
        exit 0
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -d|--data-dir)
        DATA_DIR="${2}"
        shift
        ;;
      -db|--database-dir)
        DB_DIR="${2}"
        shift
        ;;
      -rq|--sparql-dir)
        SPARQL_DIR="${2}"
        shift
        ;;
      --grasp-dir)
        GRASP_RESOURCE_DIR="${2}"
        shift
        ;;
      -p|--port)
        VIRTUOSO_PORT="${2}"
        shift
        ;;
      -t|--threads)
        NUMBER_OF_THREADS="${2}"
        shift
        ;;
      -g|--graph)
        RDF_GRAPH_NAME="${2}"
        shift
        ;;
      -m|--max-memory)
        VIRTUOSO_MAX_MEMORY="${2}"
        shift
        ;;
      "up")
        CMD="up"
        ;;
      "down")
        CMD="down"
        ;;
      "validate")
        CMD="validate"
        ;;
      "load")
        CMD="load"
        ;;
      "index")
        CMD="index"
        ;;
      "clean")
        CMD="clean"
        ;;
      "test")
        CMD="test"
        ;;
      "status")
        CMD="status"
        ;;
      *)
        print_help
        exit 0
        ;;
    esac
    shift
  done

  case ${CMD} in
    "up")
      up
      ;;
    "down")
      down
      ;;
    "validate")
      validate
      ;;
    "load")
      load
      ;;
    "index")
      index
      ;;
    "clean")
      clean
      ;;
    "test")
      test
      ;;
    "status")
      status
      ;;
  esac
}

#
# Run
#
main ${@}
